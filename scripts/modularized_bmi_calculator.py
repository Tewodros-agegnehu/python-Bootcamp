# -*- coding: utf-8 -*-
"""Modularized BMI Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ua3XBUYHkPe3phXnNc6cAtTUgXjYzN3U

Focusing on mastering advanced Python concepts and techniques to implement a BMI calculator.
Writing clean, professional, and efficient code to solve real-world health-related problems.
Developing a deeper understanding of algorithms and best practices for user input handling.
Emphasizing error handling and user-friendly interactions to enhance the BMI calculation process.
Striving for maintainable and scalable code to handle various unit systems and user inputs effectively.
"""

def calculate_bmi(weight_kg: float, height_m: float) -> float:
    """
    Calculate the Body Mass Index (BMI) given weight in kilograms and height in meters.

    :param weight_kg: Weight in kilograms.
    :param height_m: Height in meters.
    :return: BMI rounded to two decimal places.
    """
    if height_m <= 0:
        raise ValueError("Height must be a positive number.")
    return round(weight_kg / (height_m ** 2), 2)

def get_bmi_category(bmi: float) -> str:
    """
    Classify the BMI into a health category.

    :param bmi: The BMI value.
    :return: A string representing the health category.
    """
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Normal weight"
    elif 25 <= bmi < 30:
        return "Overweight"
    else:
        return "Obesity"

def convert_imperial_to_metric(weight_lb: float, height_in: float) -> tuple[float, float]:
    """
    Convert imperial units (pounds and inches) to metric units (kilograms and meters).

    :param weight_lb: Weight in pounds.
    :param height_in: Height in inches.
    :return: A tuple containing the weight in kilograms and height in meters.
    """
    weight_kg = weight_lb / 2.20462
    height_m = height_in / 39.3701
    return weight_kg, height_m

def main():
    """
    Main function to prompt the user for input, calculate BMI, and output the result with the category.
    """
    unit_system = input("Enter the unit system (metric/imperial): ").strip().lower()

    try:
        if unit_system == "metric":
            weight_kg = float(input("Enter your weight in kilograms: "))
            height_m = float(input("Enter your height in meters: "))
        elif unit_system == "imperial":
            weight_lb = float(input("Enter your weight in pounds: "))
            height_in = float(input("Enter your height in inches: "))
            weight_kg, height_m = convert_imperial_to_metric(weight_lb, height_in)
        else:
            print("Invalid unit system entered.")
            return

        # Calculate BMI
        bmi = calculate_bmi(weight_kg, height_m)

        # Output the result with the corresponding health category
        bmi_category = get_bmi_category(bmi)
        print(f"Your BMI is {bmi}, which falls under the category: {bmi_category}")

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()

